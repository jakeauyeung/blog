<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0522.org</id>
  <title><![CDATA[狮子]]></title>
  <updated>2014-03-03T13:16:02+08:00</updated>
  
  <author>
    <name><![CDATA[狮子]]></name>
    
  </author>
  
  <link href="http://0522.org/rss.xml" rel="self" />
  
  <entry>
    <id>http://0522.org/post/2014/03/03/fis-img</id>
    <title><![CDATA[FIS管理项目碰到的静态图片资源引用不同步的问题]]></title>
    <updated>2014-03-03T14:00:58Z</updated>
    <link href="http://0522.org/post/2014/03/03/fis-img.html" />
    <content type="html"><![CDATA[<h3>问题：</h3>

<p>前端静态HTML页面IMG  SRC了一些图片，交付给了后台开发人员，等上线使用MD5加密的时候，发现后台页面无法引用加密后的图片资源</p>

<h3>答：</h3>

<p>一般这种情况考虑放弃MD5加密方式，而采用query方式，如：</p>

<p>fis.config.set(&#39;roadmap.path&#39;, {
   reg : &#39;**&#39;,
   query : &#39;?t=&#39; + Date.now()
});</p>

<p>fis release 的时候不要加-m参数就好了</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://0522.org/post/2014/03/03/weechat</id>
    <title><![CDATA[MAC下面IRC客户端WEECHAT基本操作方法归纳]]></title>
    <updated>2014-03-03T10:00:58Z</updated>
    <link href="http://0522.org/post/2014/03/03/weechat.html" />
    <content type="html"><![CDATA[<p><img src="http://jakeauyeung.qiniudn.com/weechat.png" alt="weechat"></p>

<h3>安装</h3>

<p>前提先要安装好homebrew</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”
</code></pre></div>
<p>之后安装weechat</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">brew install weechat
</code></pre></div>
<p>会花几分钟安装相关依赖。</p>

<p>运行weechat</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">weechat
</code></pre></div>
<p>添加IRC服务器</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">weechat&gt; /server add example irc.example.com/6669 -ssl -password=PASSWORD -ssl_verify=no
weechat&gt; /connect example
</code></pre></div>
<p>加入IRC频道</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">/join #atom
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <id>http://0522.org/post/2014/03/02/lnmp</id>
    <title><![CDATA[配置LNMP服务器总结]]></title>
    <updated>2014-03-02T14:00:58Z</updated>
    <link href="http://0522.org/post/2014/03/02/lnmp.html" />
    <content type="html"><![CDATA[<p>配置系统是一件让人很崩溃的事情，特别是新买的VPS，我觉得有必要一次性做一个总结，以免后期碰到各种的坑，如果你无意搜索这篇文章，也希望能帮助你少走弯路。</p>

<ul>
<li><a href="#mysql">配置MYSQL</a></li>
<li><a href="#nginx">编译nginx</a></li>
<li><a href="#php">编译php</a></li>
<li><a href="#nginx-php">配置nginx,php</a></li>
<li><a href="#more">服务器启动命令集合</a></li>
</ul>

<p>VPS新安装系统的话基本上是没有附带任何依赖功能，比如：GCC，make等等，我的系统是CENTOS系列，版本是6.5,我针对LNMP一次性收集到了所有涉及需要安装的包，所以你也可以无脑的跟我一样，第一件事情就是安装下面这些东西。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">yum -y install make cmake gcc gcc-c++ autoconf automake libpng-devel libjpeg-devel zlib* fiex* libxml* ncurses-devel bison libmcrypt* libtool-ltdl-devel* libiconv libmcrypt mhash mcrypt pcre-devel openssl bzip2 bzip2-devel curl-devel freetype-devel openldap openldap-devel mysql mysql-server mysql-devel
</code></pre></div>
<h3><a href="id:mysql">配置MYSQL</a></h3>

<p>其实你会发现后面我也安装了MYSQL，既然这样，那么先配置MYSQL吧，下面这段代码是配置MYSQL环境，启动MYSQL,设置MYSQL密码</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">chgrp -R mysql /var/lib/mysql
chmod -R 770 /var/lib/mysql
service mysqld start
mysql
SET PASSWORD FOR &quot;root&quot;@&quot;localhost&quot; = PASSWORD(&quot;secret_password&quot;); 
</code></pre></div>
<p>下面我们要做的是让MYSQL更加安全些。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">delete from mysql.user where user='';  ← 删除匿名用户
delete from mysql.user where user='root' and host='0522.org';  ← 删除该域名下的root用户
</code></pre></div>
<p>到这里MYSQL就完成了所有的配置，如果你不幸踩到这个坑，PHP连接MYSQL时候告诉你：</p>

<p>很抱歉，无法连接数据库，请检查数据库配置
那么你将很难在短时间找到你需要的答案，至少我花了一天时间，不过我最后在StackOverflow找到了答案。</p>

<p>首先你应该查询mysql socket位置，登录mysql命令操作界面，输入：</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">show variables like 'socket';
</code></pre></div>
<p>那么你会看到的内容，比如：</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">socket        | /var/lib/mysql/mysql.sock
</code></pre></div>
<p>接下来你应该这样操作了，</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">cd /tmp
ln -s /var/lib/mysql/mysql.sock mysql.sock
</code></pre></div>
<p>至此MYSQL安装与配置就完成了。</p>

<h3><a href="id:nginx">编译nginx</a></h3>

<p>安装nginx版本最好是选择稳定版本，不要随便去尝试开发版本，会给你造成很多不必要的麻烦，http://nginx.org/ 可下载最新的稳定版本。
编译nginx比较简单，无脑输入下面命令即可，默认安装的路径：/uer/local/nginx；配置：/uer/local/nginx/conf/nginx.conf 根目录：/uer/local/nginx/html</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">wget http://nginx.org/download/nginx-x.x.x.tar.gz
tar zxvf nginx-x.x.x.tar.gz
cd nginx-x.x.x
./configure
make
make install 
</code></pre></div>
<p>至此nginx编译安装完成</p>

<h3><a href="id:php">编译php</a></h3>

<p>因为PHP不在自带libmcrypt了，所以你必须自己去安装，可手动与加第三方源来解决这个问题，我这里偷个懒，采用后者，前提你需要加一个源：</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">rpm -ivh http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.i686.rpm
yum clean all
yum makecache
yum install libmcrypt libmcrypt-devel mcrypt-devel  #安装依赖
</code></pre></div>
<p>接下来便是配置PHP项目了，我的配置规则如下：</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-openssl -enable-fpm --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-libxml-dir=/usr --enable-xml --with-mhash --with-mcrypt --enable-pcntl --enable-sockets --with-bz2 --with-curl --with-curlwrappers --enable-mbregex --with-gd --enable-gd-native-ttf --enable-zip --enable-soap --with-iconv --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-ldap --with-ldap-sasl --enable-pdo --with-pdo-mysql 
</code></pre></div>
<p>前面我已经安装了各种需要的依赖包，很顺利的完成配置，如果提示缺少什么依赖，你安装什么依赖吧。
最后：</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">make
make install clean
</code></pre></div>
<p>这里的php.ini的配置路径是/usr/local/php/etc，你还需要将源文件的PHP.INI.XXXXX复制到此目录</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">cp php.ini-development /usr/local/php/etc/php.ini
</code></pre></div>
<p>至此，PHP编译安装完成</p>

<h3><a href="id:nginx-php">配置nginx,php</a></h3>

<p>要使用类似service nginx start命令来启动nginx服务器，你必须要在/etc/init.d写一个文件，我自己用nginx</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">vi /etc/init.d/nginx
</code></pre></div>
<p>复制下面这段代码进去，保存退出</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig:   - 85 15
# description: Nginx is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.

[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0

nginx=&quot;/usr/local/nginx/sbin/nginx&quot;
prog=$(basename $nginx)
NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;
[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx
lockfile=/var/lock/subsys/nginx

start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    echo -n $&quot;Starting $prog: &quot;
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] &amp;&amp; touch $lockfile
    return $retval
}

stop() {
    echo -n $&quot;Stopping $prog: &quot;
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile
    return $retval
killall -9 nginx
}

restart() {
    configtest || return $?
    stop
    sleep 1
    start
}

reload() {
    configtest || return $?
    echo -n $&quot;Reloading $prog: &quot;
    killproc $nginx -HUP
RETVAL=$?
    echo
}

force_reload() {
    restart
}

configtest() {
$nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status &gt;/dev/null 2&gt;&amp;1
}

case &quot;$1&quot; in
    start)
        rh_status_q &amp;&amp; exit 0
    $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)   
      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;
        exit 2
esac
</code></pre></div>
<p>再做下面的操作</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">sudo chmod 775 nginx   &lt;-改写文件权限
chkconfig --add nginx  &lt;-添加到系统
chkconfig nginx  on    &lt;-添加系统自动启动
service nginx start    &lt;-启动服务  （start | stop | restart）
</code></pre></div>
<p>现在还差nginx跟php配置了，先检查/usr/local/nginx/conf是否有fastcgi.conf ，如果没有那么我们需要复制一份</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">cp fastcgi.conf.default fastcgi.conf
</code></pre></div>
<p>之后打开nginx.conf，修改如下几处</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">location / {
            root   html;
            index  index.php index.html index.htm;
            }
location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
</code></pre></div>
<p>至此配置结束，后面便是启动服务，然后测试。</p>

<h3><a href="id:more">服务器启动命令集合</a></h3>
<div class="highlight"><pre><code class="text language-text" data-lang="text">service mysqld start &lt;-启动服务 （start | stop | restart）
service nginx start &lt;-启动服务 （start | stop | restart）
/usr/local/php/sbin/php-fpm &lt;-启动fpm
kill -INT 'cat /usr/local/php/var/run/php-fpm.pid' &lt;-php-fpm 关闭
kill -USR2 'cat /usr/local/php/var/run/php-fpm.pid' &lt;-php-fpm 重启
ps aux | grep -c php-fpm &lt;-查看php-fpm进程数
</code></pre></div>]]></content>
  </entry>
  
</feed>